mkdir
cd
git init
touch Readme.txt
git status
git add "Readme.txt" / git add --all
git commit -m add "Readme.txt"
git remote add origin https://github.com/emmanuelvelanganni/xsysys_website.git
git remote -v
git push

if  some errror like rejected because the tip of your current branch is behind ...
gitk HEAD @{u}

git push -f

to change remote url :

git remote set-url origin type-your-new-url-here



if it asks for upstream branch or something like that...
type following line and then git push

git config --global push.default current


to delete branch
git push origin --delete <branchName>

----------------

Manipulating branches

Creating, deleting, and modifying branches is quick and easy; here’s a summary of the commands:

git branch
    list all branches. 
git branch <branch>
    create a new branch named <branch>, referencing the same point in history as the current branch. 
git branch <branch> <start-point>
    create a new branch named <branch>, referencing <start-point>, which may be specified any way you like, including using a branch name or a tag name. 
git branch -d <branch>
    delete the branch <branch>; if the branch is not fully merged in its upstream branch or contained in the current branch, this command will fail with a warning. 
git branch -D <branch>
    delete the branch <branch> irrespective of its merged status. 
git checkout <branch>
    make the current branch <branch>, updating the working directory to reflect the version referenced by <branch>. 
git checkout -b <new> <start-point>
    create a new branch <new> referencing <start-point>, and check it out. 

----------------------------------

Deleting a remote branch:

git push origin --delete <branch>  # Git version 1.7.0 or newer
git push origin :<branch>          # Git versions older than 1.7.0

Deleting a local branch:

git branch --delete <branch>
git branch -d <branch> # Shorter version
git branch -D <branch> # Force delete un-merged branches

Deleting a local remote-tracking branch:

git branch --delete --remotes <remote>/<branch>
git branch -dr <remote>/<branch> # Shorter

git fetch <remote> --prune # Delete multiple obsolete tracking branches
git fetch <remote> -p      # Shorter


-----------------------------------

new branch.

git branch -d <branch>

Delete the specified branch. This is a “safe” operation in that Git prevents you from deleting the branch if it has unmerged changes.

git branch -D <branch>

Force delete the specified branch, even if it has unmerged changes. This is the command to use if you want to permanently throw away all of the commits associated with a particular line of development.

git branch -m <branch>

Rename the current branch to <branch>.

to checkout branches 

$ git checkout -m master